// --- IAM Role for Lambda Execution ---


resource "aws_iam_role" "lambda_transfer_role" {
  name = "lambda-transfer-role-${var.service_name}-${var.environment}"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
        Action = "sts:AssumeRole"
      }
    ]
  })
}

# --- IAM Policy with Consolidated Permissions ---
resource "aws_iam_policy" "lambda_transfer_policy" {
  name        = "lambda-transfer-policy-${var.service_name}-${var.environment}"
  description = "Unified Lambda policy for Transfer Family, S3, SSM, Secrets, and Logs"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      # CloudWatch Logs
      {
        Sid: "AllowCloudWatchLogs",
        Effect: "Allow",
        Action: [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        Resource: "*"
      },

      # SSM Parameter Store
      {
        Sid: "AllowParameterStoreRead",
        Effect: "Allow",
        Action: [
          "ssm:GetParameter",
          "ssm:GetParameters",
          "ssm:GetParametersByPath"
        ],
        Resource: "arn:aws:ssm:${var.region}:${data.aws_caller_identity.current.account_id}:parameter/transfer-exports/${var.service_name}/${var.environment}/*"
      },

      # Secrets Manager
      {
        Sid: "AllowSecretsManagerRead",
        Effect: "Allow",
        Action: [
          "secretsmanager:GetSecretValue",
          "secretsmanager:DescribeSecret"
        ],
        Resource: "arn:aws:secretsmanager:${var.region}:${data.aws_caller_identity.current.account_id}:secret:${var.service_name}/${var.environment}/*"
      },

      # S3 bucket access
      {
        Sid: "AllowS3Access",
        Effect: "Allow",
        Action: [
          "s3:GetObject",
          "s3:PutObject",
          "s3:ListBucket"
        ],
        Resource: [
          "arn:aws:s3:::${var.transfer_bucket_name}",
          "arn:aws:s3:::${var.transfer_bucket_name}/*"
        ]
      },

      # Transfer Family (if Lambda needs to check users/servers)
      {
        Sid: "AllowTransferFamilyAccess",
        Effect: "Allow",
        Action: [
          "transfer:DescribeUser",
          "transfer:ListUsers",
          "transfer:TestIdentityProvider",
          "transfer:DescribeServer"
        ],
        Resource: "*"
      }
    ]
  })
}

# --- Attach Policy to Role ---
resource "aws_iam_role_policy_attachment" "lambda_transfer_attach" {
  role       = aws_iam_role.lambda_transfer_role.name
  policy_arn = aws_iam_policy.lambda_transfer_policy.arn
}